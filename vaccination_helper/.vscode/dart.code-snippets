{
	// Place your vaccination_helper workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Create exception class": {
		"scope": "dart",
		"prefix": "exception",
		"body": [
			"import 'package:vaccination_helper/helpers/exceptions/base_exception.dart';",
			"import 'package:json_annotation/json_annotation.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${1:className} extends BaseException {",
			"${1:className}();",
			"",
			"static ${1:className} fromJson(Map<String, dynamic> json) {",
			"return _$${1:className}FromJson(json);",
			"}",
			"",
			"Map<String, dynamic> toJson() => _$${1:className}ToJson(this);",
			"}"
		]
	},
	"Create JSON serializable class": {
		"scope": "dart",
		"prefix": "jsonclass",
		"body": [
			"import 'package:json_annotation/json_annotation.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${1:className}  {",
			"${1:className}();",
			"",
			"factory ${1:className}.fromJson(Map<String, dynamic> json) {",
			"return _$${1:className}FromJson(json);",
			"}",
			"",
			"Map<String, dynamic> toJson() => _$${1:className}ToJson(this);",
			"}"
		]
	},
	"Create JSON serializable class static": {
		"scope": "dart",
		"prefix": "sjsonclass",
		"body": [
			"import 'package:json_annotation/json_annotation.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${1:className}  {",
			"${1:className}();",
			"",
			"static ${1:className} fromJson(Map<String, dynamic> json) {",
			"return _$${1:className}FromJson(json);",
			"}",
			"",
			"Map<String, dynamic> toJson() => _$${1:className}ToJson(this);",
			"}"
		]
	},
	"Create SerializeObject class": {
		"scope": "dart",
		"prefix": "seobj",
		"body": [
			"import 'package:vaccination_helper/helpers/rest/serializable_object.dart';",
			"import 'package:json_annotation/json_annotation.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${1:className} implements SerializableObject {",
			"${1:className}();",
			"",
			"static ${1:className} fromJson(Map<String, dynamic> json) {",
			"return _$${1:className}FromJson(json);",
			"}",
			"",
			"Map<String, dynamic> toJson() => _$${1:className}ToJson(this);",
			"}"
		]
	},
	"Create Dto class": {
		"scope": "dart",
		"prefix": "dto",
		"body": [
			"import 'package:vaccination_helper/helpers/rest/serializable_object.dart';",
			"import 'package:json_annotation/json_annotation.dart';",
			"",
			"part '$1_dto.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${2:className}Dto implements SerializableObject {",
			"$0",
			"",
			"${2:className}Dto();",
			"",
			"${2:className}Dto.create($3);",
			"",
			"factory ${2:className}Dto.fromJson(Map<String, dynamic> json) {",
			"return _$${2:className}DtoFromJson(json);",
			"}",
			"",
			"Map<String, dynamic> toJson() => _$${2:className}DtoToJson(this);",
			"}"
		]
	},
	"Create Entity class": {
		"scope": "dart",
		"prefix": "bvjson",
		"body": [
			"import 'package:json_annotation/json_annotation.dart';",
			"import 'package:built_value/built_value.dart';",
			"import 'package:built_collection/built_collection.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"@JsonSerializable()",
			"class ${1:jsonClassName} {",
			"",
			"",
			"  ${1:jsonClassName}();",
			"",
			"  static ${1:jsonClassName} fromJson(Map<String, dynamic> json) {",
			"    return _$${1:jsonClassName}FromJson(json);",
			"  }",
			"",
			"  Map<String, dynamic> toJson() => _$${1:jsonClassName}ToJson(this);",
			"",
			"  ${2:stateName}State toImmutableState() {",
			"    return new ${2:stateName}State.from${1:jsonClassName}(this);",
			"  }",
			"}",
			"",
			"abstract class ${2:stateName}State implements Built<${2:stateName}State, ${2:stateName}StateBuilder> {",
			" ",
			"",
			"",
			"  ${2:stateName}State._();",
			"",
			"  factory ${2:stateName}State([void Function(${2:stateName}StateBuilder) updates]) {",
			"    return new _$${2:stateName}State(updates);",
			"  }",
			"",
			"  factory ${2:stateName}State.from${1:jsonClassName}(${1:jsonClassName} $4) {",
			"    return new ${2:stateName}State((b) {});",
			"  }",
			"}"
		]
	},
	"Create BV class": {
		"scope": "dart",
		"prefix": "bv",
		"body": [
			"import 'package:built_value/built_value.dart';",
			"import 'package:built_collection/built_collection.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"abstract class ${1:className}State implements Built<${1:className}State, ${1:className}StateBuilder> {",
			"  ",
			"",
			"  ${1:className}State._();",
			"",
			"  factory ${1:className}State([void Function(${1:className}StateBuilder) updates]) {",
			"    return new _$${1:className}State(updates);",
			"  }",
			"}"
		]
	},
	"Create redux action class": {
		"scope": "dart",
		"prefix": "action",
		"body": [
			"import 'package:async_redux/async_redux.dart';",
			"import 'package:vaccination_helper/core/redux/app_state.dart';",
			"",
			"class ${1:name}Action extends ReduxAction<AppState> {",
			"",
			"  @override",
			"  Future<AppState> reduce() async {",
			"    ",
			"  }",
			"}",
		]
	},
	"Create redux sync action class": {
		"scope": "dart",
		"prefix": "saction",
		"body": [
			"import 'package:async_redux/async_redux.dart';",
			"import 'package:vaccination_helper/core/redux/app_state.dart';",
			"",
			"class ${1:name}Action extends ReduxAction<AppState> {",
			"",
			"  @override",
			"  AppState reduce()  {",
			"    ",
			"  }",
			"}",
		]
	},
	"Create redux action before": {
		"scope": "dart",
		"prefix": "rbefore",
		"body": [
			"@override",
			"void before() {}",
		]
	},
	"Create redux action after": {
		"scope": "dart",
		"prefix": "rafter",
		"body": [
			"@override",
			"void after() {}",
		]
	},
	"Create bv mutator": {
		"scope": "dart",
		"prefix": "bvmutate",
		"body": [
			"${1:className} ${2:methodName}(){",
			"  return this.rebuild((b) {",
			"    $0",
			"  });",
			"}"
		]
	},
	"Create bv new value factory": {
		"scope": "dart",
		"prefix": "bvnewfactory",
		"body": [
			"factory ${1:className}.${2:factoryName}() {",
			"  return new ${1:className}((b) {",
			"    $0",
			"  });",
			"}"
		]
	},
	"Create redux state observer": {
		"scope": "dart",
		"prefix": "rsobserver",
		"body": [
			"import 'package:async_redux/async_redux.dart';",
			"import 'package:vaccination_helper/core/redux/app_state.dart';",
			"",
			"class ${1:className}Observer extends StateObserver<AppState> {",
			"  void observe(",
			"    ReduxAction<AppState> action,",
			"    AppState stateIni,",
			"    AppState stateEnd,",
			"    int dispatchCount,",
			"  ) {$0}",
			"}"
		]
	},
	"Create redux connector": {
		"scope": "dart",
		"prefix": "connector",
		"body": [
			"import 'package:async_redux/async_redux.dart';",
			"import 'package:flutter/material.dart';",
			"import 'package:vaccination_helper/core/redux/app_state.dart';",
			"import 'package:built_value/built_value.dart';",
			"import 'package:built_collection/built_collection.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"class ${1:className}Connector extends StatelessWidget {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return StoreConnector<AppState, ${1:className}ViewModel>(",
			"        vm: () => new ${1:className}VmFactory(this),",
			"        builder: (BuildContext context, ${1:className}ViewModel vm) {});",
			"  }",
			"}",
			"",
			"class ${1:className}VmFactory extends VmFactory<AppState, ${1:className}Connector> {",
			"  ${1:className}VmFactory(widget) : super(widget);",
			"",
			"  @override",
			"  ${1:className}ViewModel fromStore() {",
			"    return new ${1:className}ViewModel(new ${1:className}State.create());",
			"  }",
			"}",
			"",
			"class ${1:className}ViewModel extends Vm {",
			"  final ${1:className}State state;",
			"",
			"  ${1:className}ViewModel(this.state) : super(equals: [state]);",
			"}",
			"",
			"abstract class ${1:className}State",
			"    implements Built<${1:className}State, ${1:className}StateBuilder> {",
			"  ${1:className}State._();",
			"",
			"  factory ${1:className}State([void Function(${1:className}StateBuilder) updates]) {",
			"    return new _$${1:className}State(updates);",
			"  }",
			"",
			"  factory ${1:className}State.create() {",
			"    return new ${1:className}State((b) {});",
			"  }",
			"}"
		]
	},
	"Create redux connector with translation": {
		"scope": "dart",
		"prefix": "tconnector",
		"body": [
			"import 'package:async_redux/async_redux.dart';",
			"import 'package:flutter/material.dart' hide Builder;",
			"import 'package:vaccination_helper/core/redux/app_state.dart';",
			"import 'package:built_value/built_value.dart';",
			"import 'package:built_collection/built_collection.dart';",
			"import 'package:vaccination_helper/core/translation/translator.dart';",
			"",
			"part '$0.g.dart';",
			"",
			"class ${1:className}Connector extends StatelessWidget {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return StoreConnector<AppState, ${1:className}ViewModel>(",
			"        vm: () => new ${1:className}VmFactory(this),",
			"        builder: (BuildContext context, ${1:className}ViewModel vm) {",
			"          ",
			"        });",
			"  }",
			"}",
			"",
			"class ${1:className}VmFactory extends VmFactory<AppState, ${1:className}Connector> {",
			"  ${1:className}VmFactory(widget) : super(widget);",
			"",
			"  @override",
			"  ${1:className}ViewModel fromStore() {",
			"    return new ${1:className}ViewModel(state.settingsState.language,",
			"        new ${1:className}State.create());",
			"  }",
			"}",
			"",
			"class ${1:className}ViewModel extends Vm {",
			"  final ${1:className}State state;",
			"",
			"  final String language;",
			"",
			"  final Translator translator;",
			"",
			"  ${1:className}ViewModel(this.language, this.state)",
			"      : translator = new Translator(language, translationOverrides),",
			"        super(equals: [state, language]);",
			"}",
			"",
			"abstract class ${1:className}State",
			"    implements Built<${1:className}State, ${1:className}StateBuilder> {",
			"  ${1:className}State._();",
			"",
			"  factory ${1:className}State([void Function(${1:className}StateBuilder) updates]) {",
			"    return new _$${1:className}State(updates);",
			"  }",
			"",
			"  factory ${1:className}State.create() {",
			"    return new ${1:className}State((b) {",
			"",
			"    });",
			"  }",
			"}",
			"",
			"const Map<String, Map<String, String>> translationOverrides = {};"
		]
	},
}